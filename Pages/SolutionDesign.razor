@page "/services/solution-design"
@inject NavigationManager Nav

<div class="max-w-4xl mx-auto mt-20 mb-16 px-6">
    <!-- Back button -->
    <button class="text-accent1 mb-6 block px-4 py-2 rounded border border-accent1
               hover:bg-accent1 hover:text-white transition"
            @onclick="GoBack">
        ← Back
    </button>

    <!-- Page title -->
    <h1 class="text-3xl font-bold mb-8">Solution Design</h1>

    <!-- Accordion of steps -->
    <div class="space-y-4">
        @foreach (var (step, idx) in Steps.Select((s, i) => (s, i)))
        {
            var num = idx + 1;
            <div class="border border-gray-200 rounded-lg overflow-hidden">
                <button class="w-full flex items-center justify-between px-4 py-3 bg-gray-100 hover:bg-gray-200 transition"
                        @onclick="() => Toggle(step)">
                    <div class="flex items-center space-x-3">
                        <!-- Step number badge -->
                        <div class="flex items-center justify-center w-8 h-8 rounded-full bg-accent1 text-white font-bold">
                            @num
                        </div>
                        <span class="font-medium">@step.Title</span>
                    </div>
                    <svg class="w-5 h-5 transform @(step.IsExpanded ? "rotate-180" : "") transition-transform"
                         fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round"
                              d="M19 9l-7 7-7-7" />
                    </svg>
                </button>

                @if (step.IsExpanded)
                {
                    <div class="px-4 py-3 bg-white">
                        @step.Description
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    void GoBack() => Nav.NavigateTo("/");

    class Step
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public bool IsExpanded { get; set; }
    }

    List<Step> Steps = new()
    {
        new Step {
            Title = "You come to us with your business idea and IT‑strategy insights.",
            Description = "You already have a clear business concept and an understanding of your overarching IT strategy, so we jump straight into design."
        },
        new Step {
            Title = "We analyze every module and write a technical description.",
            Description = "Our team breaks down your idea into discrete modules and produces detailed technical specifications for each component."
        },
        new Step {
            Title = "We create a delivery pipeline.",
            Description = "We architect and configure a robust CI/CD delivery pipeline to streamline development, testing, and deployment."
        },
        new Step {
            Title = "We define every single task needed for the final result.",
            Description = "All work items are broken out, prioritized, and structured so your implementation team knows exactly what to build and in what order."
        },
        new Step {
            Title = "We hand off all designs in your tool of choice (Jira, Trello, Azure DevOps, etc.).",
            Description = "Whether you prefer Jira boards, Trello cards, or Azure DevOps, we deliver fully‑populated project artifacts so you can hit the ground running."
        },
    };

    void Toggle(Step step) => step.IsExpanded = !step.IsExpanded;
}

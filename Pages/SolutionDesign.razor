@page "/services/solution-design"
@inject NavigationManager Nav

<div class="max-w-4xl mx-auto mb-16 px-6 pt-32">
    <!-- Back button -->
    <button class="text-accent1 mb-6 block px-4 py-2 rounded border border-accent1
               hover:bg-accent1 hover:text-white transition"
            @onclick="GoBack">
        ← Back
    </button>

    <!-- Page title -->
    <h1 class="text-3xl font-bold mb-8">Solution Design</h1>

    <!-- Accordion of steps -->
    <div class="space-y-4">
        @foreach (var (step, idx) in Steps.Select((s, i) => (s, i)))
        {
            var num = idx + 1;
            <div class="border border-gray-200 rounded-lg overflow-hidden">
                <button class="w-full flex items-center justify-between px-4 py-3 bg-gray-100 hover:bg-gray-200 transition"
                        @onclick="() => Toggle(step)">
                    <div class="flex items-center space-x-3">
                        <!-- Step number badge -->
                        <div class="flex items-center justify-center w-8 h-8 rounded-full bg-accent1 text-white font-bold">
                            @num
                        </div>
                        <span class="font-medium">@step.Title</span>
                    </div>
                    <svg class="w-5 h-5 transform @(step.IsExpanded ? "rotate-180" : "") transition-transform"
                         fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round"
                              d="M19 9l-7 7-7-7" />
                    </svg>
                </button>

                @if (step.IsExpanded)
                {
                    <div class="px-6 py-4 bg-white">
                        <ul class="list-disc list-inside text-gray-700 space-y-2 text-sm">
                            @foreach (var detail in step.Details)
                            {
                                <li>@detail</li>
                            }
                        </ul>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    void GoBack() => Nav.NavigateTo("/");

    class Step
    {
        public string Title { get; set; }
        public List<string> Details { get; set; }
        public bool IsExpanded { get; set; }
    }

    List<Step> Steps = new()
    {
        new Step {
            Title = "You come to us with your business idea and IT-strategy insights.",
            Details = new()
            {
                "Review your high-level strategy to align technical scope with business goals",
                "Gather existing documentation, user personas, and success metrics",
                "Host a kickoff workshop with stakeholders to clarify assumptions",
                "Define project constraints: budget, timeline, compliance requirements"
            }
        },
        new Step {
            Title = "We analyze every module and write a technical description.",
            Details = new()
            {
                "Break down the solution into functional domains and microservices",
                "Draft data models, API contracts, and user-flow diagrams",
                "Specify tech stack choices (frontend, backend, database, messaging)",
                "Document non-functional requirements: performance, security, scalability"
            }
        },
        new Step {
            Title = "We create a delivery pipeline.",
            Details = new()
            {
                "Design CI/CD workflows for build, test, and deployment stages",
                "Integrate static code analysis, unit testing, and security scans",
                "Configure artifact repositories and container registries",
                "Set up automated rollback and monitoring hooks"
            }
        },
        new Step {
            Title = "We define every single task needed for the final result.",
            Details = new()
            {
                "Translate technical specs into actionable user stories or tasks",
                "Estimate effort and assign priority (MoSCoW / story points)",
                "Organize tasks into sprints or milestones",
                "Prepare acceptance criteria and test scenarios for each item"
            }
        },
        new Step {
            Title = "We hand off all designs in your tool of choice (Jira, Trello, Azure DevOps, etc.).",
            Details = new()
            {
                "Populate boards with epics, stories, and sub-tasks",
                "Attach wireframes, sequence diagrams, and API spec docs",
                "Configure workflows, labels, swimlanes, and permission schemes",
                "Ensure handoff includes a walkthrough and knowledge-transfer session"
            }
        },
    };

    void Toggle(Step step) => step.IsExpanded = !step.IsExpanded;
}

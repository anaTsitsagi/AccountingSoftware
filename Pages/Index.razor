@page "/"
@using AccountingSoftware.Shared
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Localization
@using System.Globalization;
@inject IStringLocalizer<Index> L
@inject IJSRuntime JS
@inject NavigationManager Nav

<style>
    /* Typography hierarchy */
    .hero h1 {
        line-height: 1.2;
        font-weight: 800;
    }

    .hero p {
        max-width: 40ch;
        margin: 0 auto;
    }

    main p, section p {
        font-size: 1.0625rem;
        line-height: 1.6;
    }

    /* Plain background for hero (no gradients/shadows) */
    .hero {
        background-color: #f0eeff;
        position: relative;
    }

        /* Remove pattern overlay entirely */
        .hero::before {
            display: none;
        }

    /* Fade-in-up keyframes */
    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .fade-in-up {
        animation: fadeInUp 0.6s ease-out both;
    }

    /* ServiceCard hover 3D effect */
    .service-card {
        transition: transform .3s, box-shadow .3s;
    }

        .service-card:hover {
            transform: perspective(500px) translateZ(8px) rotateY(3deg);
            box-shadow: 0 10px 20px rgba(0,0,0,0.12);
        }
</style>

<div class="flex flex-col min-h-screen bg-background text-text font-sans antialiased">
    <!-- Hero: now a flat background, limited content width -->
    <header class="hero flex flex-col items-center justify-center h-screen text-center overflow-hidden">
        <div class="z-10 max-w-6xl mx-auto px-6">
            <h1 class="text-5xl md:text-6xl lg:text-7xl text-gray-800 mb-4 fade-in-up">
                @L["HeroTitle"]
            </h1>
            <p class="text-lg md:text-xl text-gray-700 mb-10 fade-in-up" style="animation-delay:0.2s;">
                @L["HeroSubtitle"]
            </p>
            <div class="flex flex-col sm:flex-row gap-4 justify-center mt-6 fade-in-up" style="animation-delay:0.4s;">
                <!-- Explore Services Button -->
                <a href="#services"
                   class="group relative inline-block bg-white text-accent1 font-semibold py-3 px-8 rounded-full overflow-hidden transition">
                    <span class="relative z-10">@L["ExploreServicesButton"]</span>
                    <span class="absolute inset-0 bg-accent1 scale-x-0 group-hover:scale-x-100
                       transform origin-left transition-transform duration-300 opacity-20"></span>
                </a>
                <!-- Get In Touch Button -->
                <a href="#contact"
                   class="group relative inline-block bg-accent1 text-white font-semibold py-3 px-8 rounded-full overflow-hidden transition">
                    <span class="relative z-10">@L["GetInTouchButton"]</span>
                    <span class="absolute inset-0 bg-white scale-x-0 group-hover:scale-x-100
                       transform origin-left transition-transform duration-300 opacity-20"></span>
                </a>
            </div>
        </div>
    </header>


    <!-- Services Grid -->
    <main id="services" class="py-20 px-6 bg-background">
        <h2 class="text-3xl font-semibold text-center mb-12">@L["OurServicesHeading"]</h2>
        <div class="max-w-6xl mx-auto grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8">
            <ServiceCard Icon="bi-compass"
                         Title="@L["Service1_Title"]"
                         Description="@L["Service1_Description"]"
                         BackText="@L["Service1_BackText"]"
                         Link="@L["Service1_Link"]" />

            <ServiceCard Icon="bi-diagram-3"
                         Title="@L["Service2_Title"]"
                         Description="@L["Service2_Description"]"
                         BackText="@L["Service2_BackText"]"
                         Link="@L["Service2_Link"]" />

            <ServiceCard Icon="bi-cpu"
                         Title="@L["Service3_Title"]"
                         Description="@L["Service3_Description"]"
                         BackText="@L["Service3_BackText"]"
                         Link="@L["Service3_Link"]" />

            <ServiceCard Icon="bi-tools"
                         Title="@L["Service4_Title"]"
                         Description="@L["Service4_Description"]"
                         BackText="@L["Service4_BackText"]"
                         Link="@L["Service4_Link"]" />
        </div>
    </main>

@*     <main id="services" class="py-20 px-6 bg-background">
        <h2 class="text-3xl font-semibold text-center mb-12">@L["OurServicesHeading"]</h2>
        <div class="max-w-6xl mx-auto grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8">
            @foreach (var svc in Services)
            {
                <div class="service-card fade-in-up bg-white p-6 rounded-lg shadow hover:shadow-lg">
                    <div class="text-accent1 text-4xl mb-4"><i class="bi @svc.Icon"></i></div>
                    <h3 class="text-xl font-semibold mb-2">@svc.Title</h3>
                    <ul class="list-disc list-inside text-gray-600 mb-4">
                        @foreach (var pt in svc.Points)
                        {
                            <li>@pt</li>
                        }
                    </ul>
                    <a href="@svc.Link" class="text-accent1 font-medium hover:underline">
                        @L["LearnMore"]
                    </a>
                </div>
            }
        </div>
    </main> *@


    <!-- About Us -->
    <section id="about" class="py-16 px-6 bg-white">
        <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center">
            <img src="/images/about-us.jpg"
                 alt="@L["AboutSection_Title"] illustration"
                 class="w-full rounded-xl shadow-md" />
            <div>
                <h2 class="text-3xl font-bold mb-4">@L["AboutSection_Title"]</h2>
                <p class="mb-4 text-gray-700 leading-relaxed">@L["AboutParagraph1"]</p>
                <p class="mb-6 text-gray-700 leading-relaxed">@L["AboutParagraph2"]</p>
                <a href="#contact"
                   class="inline-block bg-accent1 text-white font-medium py-2 px-6 rounded-full hover:bg-accent2 transition">
                    @L["GetInTouchButton"]
                </a>
            </div>
        </div>
    </section>

    <!-- Contact Section -->
    <section id="contact" class="py-12 bg-background">
        <div class="max-w-6xl mx-auto px-6">
            <h2 class="text-2xl font-semibold text-center mb-8">@L["ContactSection_Title"]</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                <!-- Map -->
                <div class="h-80 w-full rounded-lg overflow-hidden shadow-md">
                    <iframe src="https://maps.google.com/maps?q=Tbilisi,Georgia&z=13&output=embed"
                            class="w-full h-full" frameborder="0" allowfullscreen loading="lazy"></iframe>
                </div>
                <!-- Form -->
                <div>
                    @if (contactSubmitted)
                    {
                        <div class="bg-green-100 border border-green-300 text-green-800 p-4 rounded mb-6">
                            @L["ThankYouMessage"]
                        </div>
                    }
                    <EditForm Model="contactModel" OnValidSubmit="HandleContactSubmit" class="space-y-4">
                        <DataAnnotationsValidator />

                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium mb-1">@L["NameLabel"]</label>
                                <InputText @bind-Value="contactModel.Name"
                                           class="w-full border rounded p-2 text-sm"
                                           placeholder="@L["NameLabel"]" />
                                <ValidationMessage For="@(() => contactModel.Name)"
                                                   class="text-red-600 text-xs mt-1" />
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-1">@L["EmailLabel"]</label>
                                <InputText @bind-Value="contactModel.Email"
                                           type="email"
                                           class="w-full border rounded p-2 text-sm"
                                           placeholder="@L["EmailLabel"]" />
                                <ValidationMessage For="@(() => contactModel.Email)"
                                                   class="text-red-600 text-xs mt-1" />
                            </div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium mb-1">@L["SubjectLabel"]</label>
                            <InputText @bind-Value="contactModel.Subject"
                                       class="w-full border rounded p-2 text-sm"
                                       placeholder="@L["SubjectLabel"]" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium mb-1">@L["MessageLabel"]</label>
                            <InputTextArea @bind-Value="contactModel.Message"
                                           rows="4"
                                           class="w-full border rounded p-2 text-sm"
                                           placeholder="@L["MessageLabel"]" />
                            <ValidationMessage For="@(() => contactModel.Message)"
                                               class="text-red-600 text-xs mt-1" />
                        </div>

                        <div class="text-right">
                            <button type="submit"
                                    class="bg-accent1 text-white text-sm font-medium py-2 px-6 rounded hover:bg-accent2 transition">
                                @L["SendButton"]
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </section>
</div>
@code {
    record Service(string Icon, string Title, List<string> Points, string Link);
    List<Service> Services;

    protected override void OnInitialized()
    {
        Services = new List<Service>
        {
            new(
                "bi-compass",
                L["Service1_Title"],
                new List<string>
                {
                    L["Service1_Point1"],
                    L["Service1_Point2"],
                    L["Service1_Point3"]
                },
                L["Service1_Link"]
            ),
            new(
                "bi-diagram-3",
                L["Service2_Title"],
                new List<string>
                {
                    L["Service2_Point1"],
                    L["Service2_Point2"],
                    L["Service2_Point3"]
                },
                L["Service2_Link"]
            ),
            new(
                "bi-cpu",
                L["Service3_Title"],
                new List<string>
                {
                    L["Service3_Point1"],
                    L["Service3_Point2"],
                    L["Service3_Point3"]
                },
                L["Service3_Link"]
            ),
            new(
                "bi-tools",
                L["Service4_Title"],
                new List<string>
                {
                    L["Service4_Point1"],
                    L["Service4_Point2"],
                    L["Service4_Point3"]
                },
                L["Service4_Link"]
            )
        };
    }


    bool isMenuOpen;
    void ToggleMenu() => isMenuOpen = !isMenuOpen;

    string currentCulture = CultureInfo.CurrentCulture.TwoLetterISOLanguageName;
    async Task ChangeCulture(ChangeEventArgs e)
    {
        var culture = e.Value.ToString();
        await JS.InvokeVoidAsync("localStorage.setItem", "blazorCulture", culture);
        Nav.NavigateTo(Nav.Uri, forceLoad: true);
    }

    bool contactSubmitted;
    ContactModel contactModel = new();

    void HandleContactSubmit()
    {
        contactSubmitted = true;
        contactModel = new();
    }

    class ContactModel
    {
        [Required(ErrorMessageResourceName = "Validation_NameRequired", ErrorMessageResourceType = typeof(Pages.Index))]
        public string Name { get; set; }

        [Required(ErrorMessageResourceName = "Validation_EmailRequired", ErrorMessageResourceType = typeof(Pages.Index))]
        [EmailAddress(ErrorMessageResourceName = "Validation_EmailInvalid", ErrorMessageResourceType = typeof(Pages.Index))]
        public string Email { get; set; }

        public string Subject { get; set; }

        [Required(ErrorMessageResourceName = "Validation_MessageRequired", ErrorMessageResourceType = typeof(Pages.Index))]
        public string Message { get; set; }
    }
}
